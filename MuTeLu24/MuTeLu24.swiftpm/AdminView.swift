import SwiftUI

struct AdminView: View {
    @EnvironmentObject var memberStore: MemberStore
    @EnvironmentObject var language: AppLanguage
    @EnvironmentObject var flowManager: MuTeLuFlowManager
    
    @State private var editingMember: Member?
    @State private var showingEditSheet = false
    @State private var memberToDelete: Member?
    @State private var showDeleteConfirm = false
    @State private var showingAddSheet = false
    
    // ... (‡∏™‡πà‡∏ß‡∏ô body ‡πÅ‡∏•‡∏∞ toolbar ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏° ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ)
    var body: some View {
        NavigationStack {
            ScrollView {
                VStack(alignment: .center, spacing: 20) {
                    Text(language.localized("‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", "All Registered Members"))
                        .font(.title2).bold()
                        .padding(.top)
                    
                    ForEach(memberStore.members, id: \.id) { member in
                        memberCard(for: member) // ‡πÉ‡∏ä‡πâ memberCard ‡∏ï‡∏±‡∏ß‡πÉ‡∏´‡∏°‡πà
                    }
                }
                .frame(maxWidth: .infinity)
                .padding()
            }
            .navigationTitle(language.localized("‡∏´‡∏ô‡πâ‡∏≤‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö", "Admin Panel"))
            .toolbar {
                ToolbarItem(placement: .topBarLeading) {
                    Button {
                        flowManager.currentScreen = .login
                    } label: {
                        HStack {
                            Image(systemName: "arrow.left")
                            Text(language.localized("‡∏Å‡∏•‡∏±‡∏ö", "Back"))
                        }
                    }
                    .fontWeight(.semibold)
                }
                ToolbarItem(placement: .topBarTrailing) {
                    Button("‚ûï \(language.localized("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å", "Add Member"))") {
                        showingAddSheet = true
                    }
                    .fontWeight(.semibold)
                }
            }
            // ... (‡∏™‡πà‡∏ß‡∏ô sheet ‡πÅ‡∏•‡∏∞ alert ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏° ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ)
            .sheet(isPresented: $showingEditSheet) {
                if let memberToEdit = editingMember {
                    EditMemberView(member: memberToEdit) { updated in
                        if let index = memberStore.members.firstIndex(where: { $0.id == updated.id }) {
                            memberStore.members[index] = updated
                        }
                        showingEditSheet = false
                    }
                }
            }
            .alert(language.localized("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö", "Confirm Deletion"),
                   isPresented: $showDeleteConfirm) {
                Button(language.localized("‡∏•‡∏ö", "Delete"), role: .destructive) {
                    if let member = memberToDelete {
                        delete(member)
                    }
                }
                Button(language.localized("‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", "Cancel"), role: .cancel) {}
            } message: {
                Text(language.localized("‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà", "Are you sure you want to delete this member?"))
            }
            .sheet(isPresented: $showingAddSheet) {
                EditMemberView(member: nil) { newMember in
                    memberStore.members.append(newMember)
                    showingAddSheet = false
                }
            }
        }
    }
    
    // üëá [‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ] ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç memberCard ‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö struct Member ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
    @ViewBuilder
    func memberCard(for member: Member) -> some View {
        VStack(alignment: .leading, spacing: 12) {
            // MARK: - Header
            Text("üë§ \(member.fullName)")
                .font(.headline)
                .fontWeight(.bold)
            
            Divider()
            
            // MARK: - Personal & Contact Info
            VStack(alignment: .leading, spacing: 8) {
                Label(member.email, systemImage: "envelope.fill")
                Label(member.phoneNumber, systemImage: "phone.fill")
            }
            .font(.subheadline)
            
            // MARK: - "Mu-Telu" Specific Info
            VStack(alignment: .leading, spacing: 8) {
                Label("‡πÄ‡∏Å‡∏¥‡∏î‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: \(formattedDate(member.birthdate)), ‡πÄ‡∏ß‡∏•‡∏≤ \(member.birthTime)", systemImage: "calendar")
                Label("‡πÄ‡∏û‡∏®: \(member.gender)", systemImage: "person.circle")
                Label("‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà: \(member.houseNumber)", systemImage: "house.fill")
                Label("‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ: \(member.carPlate)", systemImage: "car.fill")
                Label("‡πÅ‡∏ï‡πâ‡∏°‡∏ö‡∏∏‡∏ç: \(member.meritPoints)", systemImage: "star.fill")
                    .foregroundColor(.yellow)
            }
            .font(.caption)
            .foregroundColor(.secondary)
            .padding(.top, 4)
            
            // MARK: - Action Buttons
            HStack {
                Button("‚úèÔ∏è \(language.localized("‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç", "Edit"))") {
                    editingMember = member
                    showingEditSheet = true
                }
                .buttonStyle(.bordered)
                .tint(.purple)
                
                Spacer()
                
                Button("üóëÔ∏è \(language.localized("‡∏•‡∏ö", "Delete"))") {
                    memberToDelete = member
                    showDeleteConfirm = true
                }
                .buttonStyle(.borderedProminent)
                .tint(.red)
            }
            .padding(.top, 8)
        }
        .padding()
        .background(.regularMaterial)
        .cornerRadius(15)
        .shadow(color: .black.opacity(0.1), radius: 5, y: 2)
    }
    
    func delete(_ member: Member) {
        if let index = memberStore.members.firstIndex(where: { $0.id == member.id }) {
            memberStore.members.remove(at: index)
        }
    }
    
    // ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á function ‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà (‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡πÅ‡∏¢‡∏Å‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß)
    func formattedDate(_ date: Date) -> String {
        let formatter = DateFormatter()
        formatter.dateStyle = .long // ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°
        formatter.timeStyle = .none // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤
        formatter.locale = Locale(identifier: language.currentLanguage == "th" ? "th_TH" : "en_US")
        return formatter.string(from: date)
    }
}
